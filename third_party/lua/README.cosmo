DESCRIPTION

  Lua is a language designed for embedded use in native applications. It
  has an impossibly elegant C API and the Lua language itself feels more
  like Python compared to alternatives like Tcl except it's a great deal
  faster and doesn't have strong opinions about character encoding.

PROVENANCE

  https://github.com/lua/lua/

  commit 6443185167c77adcc8552a3fee7edab7895db1a9
  Author: Roberto Ierusalimschy <roberto@inf.puc-rio.br>
  Date:   May 2, 2023 at 3:44 PM EDT

      New release number (5.4.6)

  luac.c needed to be sourced from:
  https://www.lua.org/ftp/lua-5.4.6.tar.gz

LOCAL MODIFICATIONS

  Lua now uses a bestline REPL with bash-style code completion.

  Integer literals such as `033` will now be interpreted as octal.

  Integer literals such as `0b10` will now be interpreted as binary.

  The `\e` string literal escape sequence has been added, which is
  equivalent to `\27` (the Lua version of `\033`) or the ASCII ESC
  character. It may be used for teletypewriter control like having
  bold text, which can be encoded elegantly as `\e[1mHELLO\e[0m`.

  Added Python-like printf modulus operator for strings, e.g.:
  `"Hello, %s!" % {"world"}`.

  Added Python-like printf multiply operator for strings, e.g.:
  `"Hello, world! " * 3`.

  Added `unix` module that exposes the low-level System Five system
  call interface, e.g.: `require("unix"); print(unix.getcwd())`.

  Added luaL_traceback2() for function parameters in traceback.

  Fixed a buffer overflow in os.tmpname

NOTES

  Five test files intentionally contain ISO-8859-1 (rather than 
  UTF-8) characters:

  * test/db.lua
  * test/files.lua
  * test/pm.lua
  * test/sort.lua
  * test/strings.lua

  If you edit those files as if they were UTF-8-encoded you'll
  corrupt the ISO-8859-1 characters and cause certain tests to fail.
  (Some of the tests count bytes, so you can't just fix the problem
  by converting the files â€” you'd also have to change various
  expected results.)
